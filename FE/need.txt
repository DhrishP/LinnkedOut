export default function VideoPlayerModal({ videoId, onClose }) {
  // Close on escape key
  useEffect(() => {
    const handleEsc = (e) => {
      if (e.key === 'Escape') onClose();
    };
    window.addEventListener('keydown', handleEsc);
    return () => window.removeEventListener('keydown', handleEsc);
  }, [onClose]);

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center">
      <div className="w-full max-w-5xl mx-auto relative">
        <button 
          onClick={onClose}
          className="absolute -top-10 right-0 text-white hover:text-gray-300"
        >
          Close
        </button>
        
        <div className="aspect-video w-full bg-black rounded-lg overflow-hidden">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}?autoplay=1`}
            className="w-full h-full"
            allow="autoplay; encrypted-media"
            allowFullScreen
          ></iframe>
        </div>
      </div>
    </div>
  );
}




'use client'
import { use, useEffect, useState } from "react";
import { useSidebarState } from "../../../../../hooks/useSideBarState";
import { Media } from "../../../../../types";
import SideVideo from "@/app/_components/SideVideo";

export const Page = (
    { params }: {
        params: Promise<{
            videoId: number;
        }>
    }
) => {
    const id = use(params).videoId
    const[video, setVideo] = useState<Media | null>(null)
    const isOpen = useSidebarState((state) => state.isOpen)

    // closing the sidebar to get more space to show the video
    useEffect(() => {
        const fetchDataById = async (id:number) => {
            try {
                if(isOpen) {
                    useSidebarState.getState().setIsOpen(false);
                }
                const res = await fetch(`/api/videos/media/${id}`);
                if (!res.ok) {
                    throw new Error(`Error: ${res.statusText}`);
                }
                const data = await res.json();
                setVideo(data);
            } catch (error: unknown) {
                console.error('Error fetching media:', error);
            }
        }
        fetchDataById(id)
    },[id])

    console.log(video)
    const videoId = video?.id

    return (
        <div className="flex flex-row h-screen w-full bg-[#181818]">
            <div className="bg-[#1C1C1C] rounded-xl m-10 w-[70%] h-[70%] border-golden">
                <p> {videoId} </p>
            </div>
            <SideVideo />
        </div>
    )
} 

export default Page